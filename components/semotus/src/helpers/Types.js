"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Change = 'change';
//# sourceMappingURL=data:application/json;base64,