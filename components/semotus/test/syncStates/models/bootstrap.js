"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
exports.ServerObjectTemplate = undefined;
exports.ClientObjectTemplate = undefined;
/**
 * Bootstrap for Semotus tests. Create a server controller and a client controller
 */
function bootstrap() {
    // RemoteObjectTemplate will be used for server template creation
    var RemoteObjectTemplate = require('../../../dist');
    RemoteObjectTemplate.role = 'server';
    RemoteObjectTemplate._useGettersSetters = true;
    RemoteObjectTemplate.maxCallTime = 60 * 1000;
    RemoteObjectTemplate.__conflictMode__ = 'soft';
    exports.ClientObjectTemplate = RemoteObjectTemplate._createObject();
    exports.ClientObjectTemplate.role = 'client';
    exports.ClientObjectTemplate._useGettersSetters = false;
    exports.ClientObjectTemplate.__conflictMode__ = 'soft';
    exports.ServerObjectTemplate = RemoteObjectTemplate._createObject();
    exports.ServerObjectTemplate.role = 'server';
    exports.ServerObjectTemplate._useGettersSetters = true;
    exports.ServerObjectTemplate.maxCallTime = 60 * 1000;
    exports.ServerObjectTemplate.__conflictMode__ = 'soft';
    exports.ServerObjectTemplate.memSession = {
        semotus: {}
    };
    exports.ServerObjectTemplate.__dictionary__ = RemoteObjectTemplate.__dictionary__;
    function sendToServer(message) {
        exports.ServerObjectTemplate.processMessage(message);
    }
    function sendToClient(message) {
        exports.ClientObjectTemplate.processMessage(message);
    }
    exports.ClientObjectTemplate.createSession('client', sendToServer);
    exports.ServerObjectTemplate.createSession('server', sendToClient);
    exports.ClientObjectTemplate.enableSendMessage(true, sendToServer);
    exports.ServerObjectTemplate.enableSendMessage(true, sendToClient);
    // Create a client controller template with an objectTemplate that has a session.
    var ClientController = createController(exports.ClientObjectTemplate, {});
    // Create a server controller template with an objectTemplate that has no session since the
    // session will be propagated with sessionize.
    var ServerController = createController(RemoteObjectTemplate, exports.ClientObjectTemplate.getClasses());
    chai_1.expect(ClientController == ServerController).to.equal(false);
    ClientController.debug = 'client';
    ServerController.debug = 'server';
    function createController(objectTemplate, toClear) {
        RemoteObjectTemplate.bindDecorators(objectTemplate);
        for (var obj in toClear) {
            delete require['cache'][__dirname + '/' + obj + '.js'];
        }
        return require('./Controller.js').Controller;
    }
    var clientController = new ClientController();
    exports.ClientObjectTemplate.controller = clientController;
    // Create the server controller with the same Id so they can sync up
    var serverController = exports.ServerObjectTemplate._createEmptyObject(ServerController, clientController.__id__);
    sync();
    exports.ServerObjectTemplate.controller = serverController;
    exports.ServerObjectTemplate.__changeTracking__ = true;
    exports.ServerObjectTemplate.reqSession = { loggingID: 'test', semotus: {} };
    exports.ServerObjectTemplate.logLevel = 1;
    exports.ServerObjectTemplate.logger.setLevel('info;activity:dataLogging');
    return { server: serverController, client: clientController };
}
exports.bootstrap = bootstrap;
function sync() {
    exports.ServerObjectTemplate.syncSession(undefined);
}
exports.sync = sync;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYm9vdHN0cmFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsNkJBQTRCO0FBU2pCLFFBQUEsb0JBQW9CLEdBQUcsU0FBUyxDQUFDO0FBQ2pDLFFBQUEsb0JBQW9CLEdBQUcsU0FBUyxDQUFDO0FBRTVDOztHQUVHO0FBQ0gsU0FBZ0IsU0FBUztJQUVyQixpRUFBaUU7SUFDakUsSUFBSSxvQkFBb0IsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7SUFFcEQsb0JBQW9CLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztJQUNyQyxvQkFBb0IsQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7SUFDL0Msb0JBQW9CLENBQUMsV0FBVyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDN0Msb0JBQW9CLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDO0lBRS9DLDRCQUFvQixHQUFHLG9CQUFvQixDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzVELDRCQUFvQixDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7SUFDckMsNEJBQW9CLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO0lBQ2hELDRCQUFvQixDQUFDLGdCQUFnQixHQUFHLE1BQU0sQ0FBQztJQUUvQyw0QkFBb0IsR0FBRyxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUM1RCw0QkFBb0IsQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO0lBQ3JDLDRCQUFvQixDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQztJQUMvQyw0QkFBb0IsQ0FBQyxXQUFXLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztJQUM3Qyw0QkFBb0IsQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUM7SUFDL0MsNEJBQW9CLENBQUMsVUFBVSxHQUFHO1FBQzlCLE9BQU8sRUFBRSxFQUFFO0tBQ2QsQ0FBQztJQUVGLDRCQUFvQixDQUFDLGNBQWMsR0FBRyxvQkFBb0IsQ0FBQyxjQUFjLENBQUM7SUFHMUUsU0FBUyxZQUFZLENBQUMsT0FBTztRQUN6Qiw0QkFBb0IsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELFNBQVMsWUFBWSxDQUFDLE9BQU87UUFDekIsNEJBQW9CLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCw0QkFBb0IsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQzNELDRCQUFvQixDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFFM0QsNEJBQW9CLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQzNELDRCQUFvQixDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztJQUczRCxpRkFBaUY7SUFDakYsSUFBSSxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQyw0QkFBb0IsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVsRSwyRkFBMkY7SUFDM0YsOENBQThDO0lBQzlDLElBQUksZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsb0JBQW9CLEVBQUUsNEJBQW9CLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUVqRyxhQUFNLENBQUMsZ0JBQWdCLElBQUksZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTdELGdCQUFnQixDQUFDLEtBQUssR0FBRyxRQUFRLENBQUM7SUFDbEMsZ0JBQWdCLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztJQUVsQyxTQUFTLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxPQUFPO1FBQzdDLG9CQUFvQixDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUVwRCxLQUFLLElBQUksR0FBRyxJQUFJLE9BQU8sRUFBRTtZQUNyQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQztTQUMxRDtRQUNELE9BQU8sT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsVUFBVSxDQUFDO0lBQ2pELENBQUM7SUFFRCxJQUFJLGdCQUFnQixHQUFHLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztJQUM5Qyw0QkFBb0IsQ0FBQyxVQUFVLEdBQUcsZ0JBQWdCLENBQUM7SUFFbkQsb0VBQW9FO0lBQ3BFLElBQUksZ0JBQWdCLEdBQUcsNEJBQW9CLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFMUcsSUFBSSxFQUFFLENBQUM7SUFDUCw0QkFBb0IsQ0FBQyxVQUFVLEdBQUcsZ0JBQWdCLENBQUM7SUFDbkQsNEJBQW9CLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO0lBQy9DLDRCQUFvQixDQUFDLFVBQVUsR0FBRyxFQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBQyxDQUFDO0lBQ25FLDRCQUFvQixDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDbEMsNEJBQW9CLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0lBRWxFLE9BQU8sRUFBQyxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLGdCQUFnQixFQUFDLENBQUM7QUFDaEUsQ0FBQztBQTdFRCw4QkE2RUM7QUFFRCxTQUFnQixJQUFJO0lBQ2hCLDRCQUFvQixDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRkQsb0JBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWNsYXJlIGZ1bmN0aW9uIHJlcXVpcmUobmFtZTogc3RyaW5nKTtcblxuaW1wb3J0IHtleHBlY3R9IGZyb20gJ2NoYWknO1xuaW1wb3J0IHtDb250cm9sbGVyfSBmcm9tICcuL0NvbnRyb2xsZXInO1xuXG5leHBvcnQgdHlwZSByZXRWYWwgPVxuICAgIHtcbiAgICAgICAgY2xpZW50OiBDb250cm9sbGVyO1xuICAgICAgICBzZXJ2ZXI6IENvbnRyb2xsZXI7XG4gICAgfVxuXG5leHBvcnQgbGV0IFNlcnZlck9iamVjdFRlbXBsYXRlID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBDbGllbnRPYmplY3RUZW1wbGF0ZSA9IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBCb290c3RyYXAgZm9yIFNlbW90dXMgdGVzdHMuIENyZWF0ZSBhIHNlcnZlciBjb250cm9sbGVyIGFuZCBhIGNsaWVudCBjb250cm9sbGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBib290c3RyYXAoKTogcmV0VmFsIHtcblxuICAgIC8vIFJlbW90ZU9iamVjdFRlbXBsYXRlIHdpbGwgYmUgdXNlZCBmb3Igc2VydmVyIHRlbXBsYXRlIGNyZWF0aW9uXG4gICAgdmFyIFJlbW90ZU9iamVjdFRlbXBsYXRlID0gcmVxdWlyZSgnLi4vLi4vLi4vZGlzdCcpO1xuXG4gICAgUmVtb3RlT2JqZWN0VGVtcGxhdGUucm9sZSA9ICdzZXJ2ZXInO1xuICAgIFJlbW90ZU9iamVjdFRlbXBsYXRlLl91c2VHZXR0ZXJzU2V0dGVycyA9IHRydWU7XG4gICAgUmVtb3RlT2JqZWN0VGVtcGxhdGUubWF4Q2FsbFRpbWUgPSA2MCAqIDEwMDA7XG4gICAgUmVtb3RlT2JqZWN0VGVtcGxhdGUuX19jb25mbGljdE1vZGVfXyA9ICdzb2Z0JztcblxuICAgIENsaWVudE9iamVjdFRlbXBsYXRlID0gUmVtb3RlT2JqZWN0VGVtcGxhdGUuX2NyZWF0ZU9iamVjdCgpO1xuICAgIENsaWVudE9iamVjdFRlbXBsYXRlLnJvbGUgPSAnY2xpZW50JztcbiAgICBDbGllbnRPYmplY3RUZW1wbGF0ZS5fdXNlR2V0dGVyc1NldHRlcnMgPSBmYWxzZTtcbiAgICBDbGllbnRPYmplY3RUZW1wbGF0ZS5fX2NvbmZsaWN0TW9kZV9fID0gJ3NvZnQnO1xuXG4gICAgU2VydmVyT2JqZWN0VGVtcGxhdGUgPSBSZW1vdGVPYmplY3RUZW1wbGF0ZS5fY3JlYXRlT2JqZWN0KCk7XG4gICAgU2VydmVyT2JqZWN0VGVtcGxhdGUucm9sZSA9ICdzZXJ2ZXInO1xuICAgIFNlcnZlck9iamVjdFRlbXBsYXRlLl91c2VHZXR0ZXJzU2V0dGVycyA9IHRydWU7XG4gICAgU2VydmVyT2JqZWN0VGVtcGxhdGUubWF4Q2FsbFRpbWUgPSA2MCAqIDEwMDA7XG4gICAgU2VydmVyT2JqZWN0VGVtcGxhdGUuX19jb25mbGljdE1vZGVfXyA9ICdzb2Z0JztcbiAgICBTZXJ2ZXJPYmplY3RUZW1wbGF0ZS5tZW1TZXNzaW9uID0ge1xuICAgICAgICBzZW1vdHVzOiB7fVxuICAgIH07XG5cbiAgICBTZXJ2ZXJPYmplY3RUZW1wbGF0ZS5fX2RpY3Rpb25hcnlfXyA9IFJlbW90ZU9iamVjdFRlbXBsYXRlLl9fZGljdGlvbmFyeV9fO1xuXG5cbiAgICBmdW5jdGlvbiBzZW5kVG9TZXJ2ZXIobWVzc2FnZSkge1xuICAgICAgICBTZXJ2ZXJPYmplY3RUZW1wbGF0ZS5wcm9jZXNzTWVzc2FnZShtZXNzYWdlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZW5kVG9DbGllbnQobWVzc2FnZSkge1xuICAgICAgICBDbGllbnRPYmplY3RUZW1wbGF0ZS5wcm9jZXNzTWVzc2FnZShtZXNzYWdlKTtcbiAgICB9XG5cbiAgICBDbGllbnRPYmplY3RUZW1wbGF0ZS5jcmVhdGVTZXNzaW9uKCdjbGllbnQnLCBzZW5kVG9TZXJ2ZXIpO1xuICAgIFNlcnZlck9iamVjdFRlbXBsYXRlLmNyZWF0ZVNlc3Npb24oJ3NlcnZlcicsIHNlbmRUb0NsaWVudCk7XG5cbiAgICBDbGllbnRPYmplY3RUZW1wbGF0ZS5lbmFibGVTZW5kTWVzc2FnZSh0cnVlLCBzZW5kVG9TZXJ2ZXIpO1xuICAgIFNlcnZlck9iamVjdFRlbXBsYXRlLmVuYWJsZVNlbmRNZXNzYWdlKHRydWUsIHNlbmRUb0NsaWVudCk7XG5cblxuICAgIC8vIENyZWF0ZSBhIGNsaWVudCBjb250cm9sbGVyIHRlbXBsYXRlIHdpdGggYW4gb2JqZWN0VGVtcGxhdGUgdGhhdCBoYXMgYSBzZXNzaW9uLlxuICAgIHZhciBDbGllbnRDb250cm9sbGVyID0gY3JlYXRlQ29udHJvbGxlcihDbGllbnRPYmplY3RUZW1wbGF0ZSwge30pO1xuXG4gICAgLy8gQ3JlYXRlIGEgc2VydmVyIGNvbnRyb2xsZXIgdGVtcGxhdGUgd2l0aCBhbiBvYmplY3RUZW1wbGF0ZSB0aGF0IGhhcyBubyBzZXNzaW9uIHNpbmNlIHRoZVxuICAgIC8vIHNlc3Npb24gd2lsbCBiZSBwcm9wYWdhdGVkIHdpdGggc2Vzc2lvbml6ZS5cbiAgICB2YXIgU2VydmVyQ29udHJvbGxlciA9IGNyZWF0ZUNvbnRyb2xsZXIoUmVtb3RlT2JqZWN0VGVtcGxhdGUsIENsaWVudE9iamVjdFRlbXBsYXRlLmdldENsYXNzZXMoKSk7XG5cbiAgICBleHBlY3QoQ2xpZW50Q29udHJvbGxlciA9PSBTZXJ2ZXJDb250cm9sbGVyKS50by5lcXVhbChmYWxzZSk7XG5cbiAgICBDbGllbnRDb250cm9sbGVyLmRlYnVnID0gJ2NsaWVudCc7XG4gICAgU2VydmVyQ29udHJvbGxlci5kZWJ1ZyA9ICdzZXJ2ZXInO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29udHJvbGxlcihvYmplY3RUZW1wbGF0ZSwgdG9DbGVhcikge1xuICAgICAgICBSZW1vdGVPYmplY3RUZW1wbGF0ZS5iaW5kRGVjb3JhdG9ycyhvYmplY3RUZW1wbGF0ZSk7XG5cbiAgICAgICAgZm9yICh2YXIgb2JqIGluIHRvQ2xlYXIpIHtcbiAgICAgICAgICAgIGRlbGV0ZSByZXF1aXJlWydjYWNoZSddW19fZGlybmFtZSArICcvJyArIG9iaiArICcuanMnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVxdWlyZSgnLi9Db250cm9sbGVyLmpzJykuQ29udHJvbGxlcjtcbiAgICB9XG5cbiAgICB2YXIgY2xpZW50Q29udHJvbGxlciA9IG5ldyBDbGllbnRDb250cm9sbGVyKCk7XG4gICAgQ2xpZW50T2JqZWN0VGVtcGxhdGUuY29udHJvbGxlciA9IGNsaWVudENvbnRyb2xsZXI7XG5cbiAgICAvLyBDcmVhdGUgdGhlIHNlcnZlciBjb250cm9sbGVyIHdpdGggdGhlIHNhbWUgSWQgc28gdGhleSBjYW4gc3luYyB1cFxuICAgIHZhciBzZXJ2ZXJDb250cm9sbGVyID0gU2VydmVyT2JqZWN0VGVtcGxhdGUuX2NyZWF0ZUVtcHR5T2JqZWN0KFNlcnZlckNvbnRyb2xsZXIsIGNsaWVudENvbnRyb2xsZXIuX19pZF9fKTtcblxuICAgIHN5bmMoKTtcbiAgICBTZXJ2ZXJPYmplY3RUZW1wbGF0ZS5jb250cm9sbGVyID0gc2VydmVyQ29udHJvbGxlcjtcbiAgICBTZXJ2ZXJPYmplY3RUZW1wbGF0ZS5fX2NoYW5nZVRyYWNraW5nX18gPSB0cnVlO1xuICAgIFNlcnZlck9iamVjdFRlbXBsYXRlLnJlcVNlc3Npb24gPSB7bG9nZ2luZ0lEOiAndGVzdCcsIHNlbW90dXM6IHt9fTtcbiAgICBTZXJ2ZXJPYmplY3RUZW1wbGF0ZS5sb2dMZXZlbCA9IDE7XG4gICAgU2VydmVyT2JqZWN0VGVtcGxhdGUubG9nZ2VyLnNldExldmVsKCdpbmZvO2FjdGl2aXR5OmRhdGFMb2dnaW5nJyk7XG5cbiAgICByZXR1cm4ge3NlcnZlcjogc2VydmVyQ29udHJvbGxlciwgY2xpZW50OiBjbGllbnRDb250cm9sbGVyfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN5bmMoKSB7XG4gICAgU2VydmVyT2JqZWN0VGVtcGxhdGUuc3luY1Nlc3Npb24odW5kZWZpbmVkKTtcbn0iXX0=