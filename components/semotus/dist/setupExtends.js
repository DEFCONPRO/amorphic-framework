"use strict";
// These two mixins and extender functions are needed because in the browser we only include supertype and semotus
// and since classes use these in their extends hierarchy they must be defined.
Object.defineProperty(exports, "__esModule", { value: true });
var __extends = (this && this.__extends) ||
    (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array &&
                function (d, b) {
                    d.__proto__ = b;
                }) ||
            function (d, b) {
                for (var p in b) {
                    if (b.hasOwnProperty(p)) {
                        d[p] = b[p];
                    }
                }
            };
        return function (d, b) {
            extendStatics(d, b);
            function __() {
                this.constructor = d;
            }
            d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
        };
    })();
function Persistable(Base) {
    return (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            return (_super !== null && _super.apply(this, arguments)) || this;
        }
        return class_1;
    })(Base);
}
exports.Persistable = Persistable;
function Remoteable(Base) {
    return (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            return (_super !== null && _super.apply(this, arguments)) || this;
        }
        return class_1;
    })(Base);
}
exports.Remoteable = Remoteable;
function Bindable(Base) {
    return (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            return (_super !== null && _super.apply(this, arguments)) || this;
        }
        return class_1;
    })(Base);
}
exports.Bindable = Bindable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXBFeHRlbmRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NldHVwRXh0ZW5kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsa0hBQWtIO0FBQ2xILCtFQUErRTs7QUFFL0UsSUFBTSxTQUFTLEdBQ1gsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO1FBQ0csSUFBTSxhQUFhLEdBQ2YsTUFBTSxDQUFDLGNBQWM7WUFDckIsQ0FBQyxFQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUMsWUFBWSxLQUFLO2dCQUM3QixVQUFVLENBQUMsRUFBRSxDQUFDO29CQUNWLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO2dCQUNwQixDQUFDLENBQUM7WUFDTixVQUFVLENBQUMsRUFBRSxDQUFDO2dCQUNWLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUNiLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRTt3QkFDckIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDZjtpQkFDSjtZQUNMLENBQUMsQ0FBQztRQUNOLE9BQU8sVUFBVSxDQUFDLEVBQUUsQ0FBQztZQUNqQixhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBRXBCLFNBQVMsRUFBRTtnQkFDUCxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztZQUN6QixDQUFDO1lBRUQsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzNGLENBQUMsQ0FBQztJQUNOLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFVCxTQUFnQixXQUFXLENBQUMsSUFBSTtJQUM1QixPQUFPLENBQUMsVUFBVSxNQUFNO1FBQ3BCLFNBQVMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFM0IsU0FBUyxPQUFPO1lBQ1osT0FBTyxDQUFDLE1BQU0sS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDdEUsQ0FBQztRQUVELE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ1osQ0FBQztBQVZELGtDQVVDO0FBRUQsU0FBZ0IsVUFBVSxDQUFDLElBQUk7SUFDM0IsT0FBTyxDQUFDLFVBQVUsTUFBTTtRQUNwQixTQUFTLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRTNCLFNBQVMsT0FBTztZQUNaLE9BQU8sQ0FBQyxNQUFNLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO1FBQ3RFLENBQUM7UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNaLENBQUM7QUFWRCxnQ0FVQztBQUVELFNBQWdCLFFBQVEsQ0FBQyxJQUFJO0lBQ3pCLE9BQU8sQ0FBQyxVQUFVLE1BQU07UUFDcEIsU0FBUyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUUzQixTQUFTLE9BQU87WUFDWixPQUFPLENBQUMsTUFBTSxLQUFLLElBQUksSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQztRQUN0RSxDQUFDO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDWixDQUFDO0FBVkQsNEJBVUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGVzZSB0d28gbWl4aW5zIGFuZCBleHRlbmRlciBmdW5jdGlvbnMgYXJlIG5lZWRlZCBiZWNhdXNlIGluIHRoZSBicm93c2VyIHdlIG9ubHkgaW5jbHVkZSBzdXBlcnR5cGUgYW5kIHNlbW90dXNcbi8vIGFuZCBzaW5jZSBjbGFzc2VzIHVzZSB0aGVzZSBpbiB0aGVpciBleHRlbmRzIGhpZXJhcmNoeSB0aGV5IG11c3QgYmUgZGVmaW5lZC5cblxuY29uc3QgX19leHRlbmRzID1cbiAgICAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHxcbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBleHRlbmRTdGF0aWNzID1cbiAgICAgICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHtfX3Byb3RvX186IFtdfSBpbnN0YW5jZW9mIEFycmF5ICYmXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgZC5fX3Byb3RvX18gPSBiO1xuICAgICAgICAgICAgICAgIH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHAgaW4gYikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZFtwXSA9IGJbcF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIF9fKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSksIG5ldyBfXygpKTtcbiAgICAgICAgfTtcbiAgICB9KSgpO1xuXG5leHBvcnQgZnVuY3Rpb24gUGVyc2lzdGFibGUoQmFzZSkge1xuICAgIHJldHVybiAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoY2xhc3NfMSwgX3N1cGVyKTtcblxuICAgICAgICBmdW5jdGlvbiBjbGFzc18xKCkge1xuICAgICAgICAgICAgcmV0dXJuIChfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHx8IHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2xhc3NfMTtcbiAgICB9KShCYXNlKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVtb3RlYWJsZShCYXNlKSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhjbGFzc18xLCBfc3VwZXIpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNsYXNzXzEoKSB7XG4gICAgICAgICAgICByZXR1cm4gKF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgfHwgdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjbGFzc18xO1xuICAgIH0pKEJhc2UpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCaW5kYWJsZShCYXNlKSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhjbGFzc18xLCBfc3VwZXIpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGNsYXNzXzEoKSB7XG4gICAgICAgICAgICByZXR1cm4gKF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgfHwgdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjbGFzc18xO1xuICAgIH0pKEJhc2UpXG59XG5cblxuIl19